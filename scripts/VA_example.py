import sys
sys.path.append('..')
sys.path.append('../src')

import json
from src.local_methods import def_data_dir
import numpy as np
from src.est_VA import var_anneal
from src.utils import NumpyEncoder
from src.save_data import save_cell_data
data_dir = def_data_dir()

# Since the MATLAB data file is stored in example_data_dir/recordings/trial_data/'
# we run the following command to save stimulus and measurement files for an arbitrary cell (e.g. cell 2)
# This creates a .stim and .meas files in the /stim and /meas_data folders of the data directory respectively,
# with data in 2 tab-delimited columns; the first consists of the time points, the second are the values.
dirname = 'trial_data'
fname = 'FRET_data'
cellno = 18
save_cell_data(dirname, fname, cell=cellno)

# Then, we run the variational annealing algorithm by first generating a specs file, which contains
# variables about the data (data_vars), variables about the estimation being done (est_vars).
data_vars = {'stim_file': "trial_data_cell_%s" % cellno, 'meas_file': "trial_data_cell_%s" % cellno,
             'meas_noise': 0.01*np.ones((1,))} ## should be inputted depending experimental uncertainty
est_vars = {'model': 'MWC_linear', 'est_beg_T': 0, 'est_end_T': 200, 'pred_end_T': 320}
specifications = {'data_vars': data_vars, 'est_vars': est_vars}
spec_name = '%s_cell_%s_lin' % (dirname, cellno)
with open('%s/specs/%s.txt' % (data_dir, spec_name), 'w') as outfile:
    json.dump(specifications, outfile, indent=4, cls=NumpyEncoder)

## Now, we can run the annealing algorithm with an arbitrary seed; this returns the set of optimal parameters
## according to the model.
out_dict = var_anneal(spec_name, plot=True)

# If either the specifications file, measurement file, or stimulus file is missing, it will return an error. The
# data, which is a pickled object, (.pklz) will be saved in ```data_dir/objects```, within a subfolder whose name is
# the specs file. Also saved in this subfolder are files containing the estimated parameters, estimated state
# trajectories, and estimation errors (these saved data are generated by methods of the VarAnneal class).


## Try another one
data_vars = {'stim_file': "real_data_trial_RS", 'meas_file': "real_data_trial_RS",
             'meas_noise': 0.05*np.ones((1,))} ## should be inputted depending experimental uncertainty
est_vars = {'model': 'MWC_linear', 'est_beg_T': 0, 'est_end_T': 120, 'pred_end_T': 199}
specifications = {'data_vars': data_vars, 'est_vars': est_vars}
spec_name = "real_data_trial_RS_lin"
with open('%s/specs/%s.txt' % (data_dir, spec_name), 'w') as outfile:
    json.dump(specifications, outfile, indent=4, cls=NumpyEncoder)
out_dict = var_anneal(spec_name, plot=True)